entities:
    person:
        fields:
        # personnal intrinseq
            - agem:   int
            - age:    {type: int, initialdata: false}  
            - sexe:   int
            - wprm_init: {type: int, initialdata: false}  
            
        # l_men
            - men:    int  # il faudra changer les men en men
            - quimen: int
            
        # foyer l_foy 
            - foy:      int
            - quifoy:   int
            
        # family
            - pere:   int
            - mere:   int
            - conj: int
            - dur_in_couple: {type: float, initialdata: false}
            - dur_out_couple: {type: int, initialdata: false}
            - civilstate: int
            
        # education    
            - education_level: {type: int, initialdata: false, default: 10}
            - findet: int 
            # 1: in work, 2: unemployed including old-age unemployed,
            # 3: in education, 4: retired, 5: other inactive
            
        # work
            - workstate: int
            - sali:  {type: float, default: 0.0}
            - productivity: {type: float, initialdata: false}
            - rsti: float
            - choi: float
            - xpr: int # name to avoid confusion with function exp
            - anc: int
            - dur_rest_ARE: {type: int, initialdata: false}
            
        # patrimoine
            - patrimoine: {type: float, initialdata: false}
           
        # legislation
            - salsuperbrut: {type: int, initialdata: false, default: 0} 
            - cotsoc_noncontrib: {type: int, initialdata: false} 
            - cotsal_noncontrib: {type: int, initialdata: false} 
            - cotsoc_bar: {type: int, initialdata: false} 
            - cotsoc_lib: {type: int, initialdata: false} 
            - cotpat_contrib: {type: int, initialdata: false} 
            - cotpat_noncontrib: {type: int, initialdata: false} 
            - cotsal_contrib: {type: int, initialdata: false} 
            - cotsal: {type: int, initialdata: false} 
            # - impo: {type: int, initialdata: false} 
            # - psoc: {type: int, initialdata: false} 
            # - mini: {type: int, initialdata: false} 
            # - pfam: {type: int, initialdata: false} 
            # - logt: {type: int, initialdata: false}       
         
         
         
        links:
            l_men:      {type: many2one, target: menage, field: men}
            l_foy:      {type: many2one, target: declar, field: foy}
            l_mere:     {type: many2one, target: person, field: mere}  
            l_pere:     {type: many2one, target: person, field: pere}
            l_conj:     {type: many2one, target: person, field: conj}
            invl_mere:  {type: one2many, target: person, field: mere} 
            invl_pere:  {type: one2many, target: person, field: pere}
            pers2reg:   {type: many2one, target: register, field: id}
            
        # possible transitions and regressions. The actual list used in the
        # simulation must be defined below
            homes:      {type: one2many, target: menage, field: owner}
        
        macros:
            MALE: 1
            FEMALE: 2
            ISMALE: sexe == 1
            ISFEMALE: sexe == 2

            UNSET: -1

            MARRIED: 2 
            SINGLE: 1
            DIVORCED: 4
            WIDOW: 3
            PACS : 5
            
            ISMARRIED: civilstate == 2
            ISSINGLE: civilstate == 1
            ISDIVORCED: civilstate == 4
            ISWIDOW: civilstate == 3
            ISPACS: civilstate == 5
            LEGAL_UNION: civilstate == 2 or civilstate == 5
            LEGAL_CELIB: civilstate == 1 or civilstate == 3 or civilstate == 4
            INCOUPLE: conj > -1
            
            INACTIVE:  1
            UNEMPLOYED: 2
            NON_CADRE: 3
            CADRE:     4
            FONCT_A:   5
            FONCT_S:   6
            INDEP  :   7           
            AVPF   :   8            
            PRE_RET:   9 
            RETIRED:   10 
            STUDENT:   11
                    
            ISINWORK:     (workstate == 3) or (workstate == 4) or (workstate == 5)  or (workstate == 6) or (workstate == 7)
            WORK_PUBLIC:  (workstate == 5)  or (workstate == 6)
            WORK_PRIVE:   (workstate == 3) or (workstate == 4)
            WORK_INDEP:   (workstate == 7)
            ISUNEMPLOYED: (workstate == 2)
            ISSTUDENT:    (workstate == 11)
            ISRETIRED:    (workstate == 10)
            ISOTHERINACTIVE: (workstate == 1)
            
            BEGINER: xpr == 1

            # IS_LOWER_SECONDARY_EDU: education_level == 2
            # IS_UPPER_SECONDARY_EDU: education_level == 3
            # IS_TERTIARY_EDU: education_level == 4
            # LOWER_SECONDARY_EDU: 2
            # UPPER_SECONDARY_EDU: 3
            # TERTIARY_EDU: 4
            
            
            
            
        processes:   
               
            init_weight_ind:
                - wprm_init: 1
                - month: randint(0,11)
                - age: trunc(agem/12)
                # - wprm_init: permet de faire des tests
                - wprm_init: 100*age + month
                
            ageing:
                - agem: add_time_scale(agem)
                - age: trunc(agem/12)
                # - wprm_init: permet de faire des tests
                - wprm_init: lag(agem,2)
                
            stat_period_ini:
                - csv( 'period', 'population', 'naissance', 'sali', 'rsti', 'choi','age moyen',fname='stat.csv')
                - csv( 'period', 'inactive', 'unemployed', 'non cadre', 'cadre', 'fonct_a', 'fonct_s',
                        'indep', 'avpf', 'pre_ret', 'retired', 'student', 'others', fname='workstate.csv')
                - csv( 'period', 'marrie', 'celib', 'divorce', 'voeuf', 'autre', fname='civilstate.csv')
            stat_period:               
                - csv(avg(period), count(), count(age==0), sum(sali), sum(rsti), sum(choi), avg(age), fname='stat.csv', mode='a')
                - csv( avg(period), count(workstate==1), count(workstate==2), count(workstate==3), count(workstate==4),
                       count(workstate==5), count(workstate==6), count(workstate==7), count(workstate==8),
                       count(workstate==9), count(workstate==10), count(workstate==11), count(workstate < 1),
                       fname='workstate.csv', mode='a')
                - csv( avg(period), count(civilstate==1), count(civilstate==2), count(civilstate==3), count(civilstate==4),
                       count(civilstate <1), fname='civilstate.csv', mode='a')
                       
            qui_solve: 
                - quimen: if(quimen>1, 2, quimen)
                - quimen: if(quimen==2,  
                                if( id == l_men.get(persons.min(id, quimen==2)),2,3),
                                quimen)
                - quimen: if(quimen==3,  
                                if( id == l_men.get(persons.min(id, quimen==3)),3,4),   
                                quimen)
                - quimen: if(quimen==4,  
                                if( id == l_men.get(persons.min(id, quimen==4)),4,5),
                                quimen)
                - quimen: if(quimen==5,  
                                if( id == l_men.get(persons.min(id, quimen==5)),5,6),
                                quimen)
                - quimen: if(quimen==6,  
                                if( id == l_men.get(persons.min(id, quimen==6)),6,7),
                                quimen)
                - quimen: if(quimen==7,  
                                if( id == l_men.get(persons.min(id, quimen==7)),7,8),
                                quimen)
                - quimen: if(quimen==8,  
                                if( id == l_men.get(persons.min(id, quimen==8)),8,9),
                                quimen)
                - quifoy: if(quifoy>1,2,quifoy)
                - quifoy: if(quifoy==2,  
                                if( id == l_foy.get(on_declar.min(id, quifoy==2)),2,3),
                            quifoy)
                - quifoy: if(quifoy==3,  
                                if( id == l_foy.get(on_declar.min(id, quifoy==3)),3,4),
                            quifoy)   
                - quifoy: if(quifoy==4,  
                                if( id == l_foy.get(on_declar.min(id, quifoy==4)),4,5),
                            quifoy)
                - quifoy: if(quifoy==5,  
                                if( id == l_foy.get(on_declar.min(id, quifoy==5)),5,6),
                            quifoy)
                - quifoy: if(quifoy==6,  
                                if( id == l_foy.get(on_declar.min(id, quifoy==6)),6,7),
                            quifoy)
                - quifoy: if(quifoy==7,  
                                if( id == l_foy.get(on_declar.min(id, quifoy==7)),7,8),
                            quifoy)
                - quifoy: if(quifoy==8,  
                                if( id == l_foy.get(on_declar.min(id, quifoy==8)),8,9),
                            quifoy)             
                            
  