entities:
    person:          
        processes:     
            init_couple: 
                - dur_in_couple : if(INCOUPLE,max(((age+l_conj.age)/2 - 20 ),0),0)
                - dur_out_couple : 0
                
            into_couple:
                - nb_children_ind : invl_mere.count() + invl_pere.count()
                - to_couple: 0
                # TODO: changer l'age par l'age_corr = age moins age de fin d'études 
                - agec: age - findet
                - etude_courte: (findet<20)
                - etude_longue: (findet>20)
                - to_couple: if((age >= 18) and (age <= 90) and not INCOUPLE,
                                 if(ISMALE, 
                                    logit_score(-73.10 + 8.96 * agec - 0.408* agec**2 + 0.00796 * agec ** 3 -5.72/100000*(agec ** 4) -0.13*etude_courte +0.04*etude_longue),
                                    logit_score(-68.49 + 9.06 * agec -0.441* agec**2 + 0.00914 * agec ** 3 -6.91/100000*(agec ** 4) - 0.06*etude_longue) ),
                                 to_couple)
                - ages : age - dur_out_couple #age at separtation time               
                - to_couple: if((age >= 18) and (age <= 90) and not INCOUPLE,
                                 if(ISMALE,
                                     logit_score(-0.25 + 0.09*dur_out_couple +0.19*(dur_out_couple==0) - 0.05* (ages) +0.41*(nb_children_ind==0) - 0.19*etude_courte),
                                     logit_score( 0.33 - 0.10*dur_out_couple +0.14*(dur_out_couple==0) - 0.08* (ages) +0.41*(nb_children_ind==0))- 0.57* ISWIDOW),
                                 to_couple)
                
                - to_couple: if(to_couple>0, logistic(to_couple), 0)
                - to_couple2: align_abs(to_couple, method = "sidewalk", periodicity_given="year")
                                 # A changer pour : sum(to_couple)/count((age >= 18) and (age <= 90) and not in_couple))
                - show('Number of male death', count(to_couple2))
                # vérifier qu'il n'y a pas un bouléen dans to_couple2            
                - difficult_match: if((to_couple2==1) and ISFEMALE,
                                      abs(age - avg(age, filter=(to_couple2==1) and ISMALE)),
                                      nan)
                - conj: if(to_couple2,
                                 matching(set1filter=ISFEMALE, set2filter=ISMALE,
                                          score=- 0.4893 * other.age
                                                + 0.0131 * other.age ** 2
                                                - 0.0001 * other.age ** 3
                                                + 0.0467 * (other.age - age)
                                                - 0.0189 * (other.age - age) ** 2
                                                + 0.0003 * (other.age - age) ** 3
                                                + 0.05   * (other.findet-findet),
                                          orderby=difficult_match),
                                 conj)
                                 
                # on corrige les incestes qui n'ont pas ete interdit dans le matching
                # ca n'est pas bcp de cas, donc on considère que ça ne change pas les marges
                # et puis entre les marges et un tabou universel, je sacrifie les marges
                - conj: if((conj == pere or conj == mere), UNSET, conj)
                - conj: if(l_conj.conj == UNSET, UNSET, conj)
                           
                - dur_in_couple: if(INCOUPLE, dur_in_couple + 1, 0)
                - dur_out_couple: if(INCOUPLE, 0, dur_out_couple)    
                # note : dur_out_couple is incremented in union                
             
            move_together:               
                # on emmenage en fonction de la durée du couple (faire jouer l'age ?)
                # si un des deux est pref et pas l'autre ou si on est un homme et que l'autre est pref
            
                # on s'assure qu'on ne vit pas déjà ensemble
                - to_move_together: INCOUPLE and dur_in_couple > 1 and not (quimen==1 or l_conj.quimen==1)
                # - csv(dump(id, to_move_together, sexe, l_conj.id, l_conj.age, dur_in_couple, quimen , l_conj.dur_in_couple, l_conj.quimen,  l_conj.to_move_together, l_conj.conj))
                - assertEqual( count(to_move_together) , count(l_conj.to_move_together))
                - assertTrue( count(to_move_together) % 2 == 0 )
                # select who move into the other's house
                # if only one is quimen==0 it's she or he, otherwise, we select the smallest ID.
                - to_move_in: if(to_move_together,True,False) 
# check liam2 bug was corrected and that to_move_together is copied                
                - to_move_in: if(to_move_together and l_conj.quimen == 0, 
                                        if(quimen >0, 
                                            True,
                                            if(id < l_conj.id, True, False)),
                                        False)
                - to_move_out:  to_move_together and l_conj.quimen > 0 and quimen > 0                        
                # - assert(count(to_move_in) + count(to_move_out)/2 == count(to_move_together)/2)
                # to move_in
                - new_men: if(to_move_in, l_conj.men , men)
                - quimen: if(to_move_in, 1 , quimen)
                # to move_out_together
                - who_pref: to_move_together and id < l_conj.id
                - new_men: if(to_move_together and who_pref ,
                                     new('menage', filter=to_move_together and who_pref,
                                     region_id=choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4]),
                                     rent=1500, pref= id),
                                     new_men)
                - new_men: if(to_move_together and not who_pref, l_conj.new_men, new_men)
                - quimen: if(to_move_together and who_pref, 0, quimen)
                - quimen: if(to_move_together and not who_pref, 1, quimen)               
                # enfant
                - new_men: if(l_mere.to_move_together and (new_men==men),
                            if(l_mere.men==men, l_mere.new_men, new_men),
                            new_men)
                - new_men: if(l_pere.to_move_together and (new_men==men),
                            if(l_pere.men==men, l_pere.new_men, new_men),
                            new_men) 
                # autres, qui ne sont pas a new_men == men parce que leur parent est reste
                # penser aux petits enfants
                - new_men: if( (quimen > 1) and (new_men==men),
                                l_men.l_pref.new_men, 
                                new_men) 
                - men:   new_men
                - assertEqual(max(l_men.get(persons.count(quimen==0))),1)
                - assertTrue(min(men)>=0)
                                
            legal_union:
                # on s'assure qu'on n'en n'a pas déjà un (voir plus tard pour le passage de pacs à mariage) TODO:
                - to_move_together: INCOUPLE and not LEGAL_UNION and (dur_in_couple > 2) 
                # select who move into the other's house
                # if only one is quifoy==0 it's she or he, otherwise, we select the smallest ID.
                # - csv(dump(id, to_move_together, sexe, l_conj.id, l_conj.age, dur_in_couple, quifoy , l_conj.dur_in_couple, l_conj.quifoy,  l_conj.to_move_together, civilstate, l_conj.civilstate))
                - assertEqual( count(to_move_together) , count(l_conj.to_move_together))
                - assertTrue( count(to_move_together) % 2 == 0 )
      
                - to_move_in: if(to_move_together,True,False) 
# check liam2 bug was corrected and that to_move_together is copied                
                - to_move_in: if(to_move_together and l_conj.quifoy == 0, 
                                        if(quifoy >0, 
                                            True,
                                            if(id < l_conj.id, True, False)),
                                        False)
                - to_move_out:  to_move_together and l_conj.quifoy > 0 and quifoy > 0 
                - assertEqual(count(to_move_in) + count(to_move_out)/2 , count(to_move_together)/2)
                # to move_in
                - new_foy: if(to_move_in, l_conj.foy , foy)
                - quifoy: if(to_move_in, 1 , quifoy)
                # to move_out_together
                - who_vous: to_move_together and id < l_conj.id
                - new_foy: if(to_move_together and who_vous ,
                                    new('declar', filter=to_move_together and who_vous,pond=l_foy.pond, vous= id),                                
                                     new_foy)
                - new_foy: if(to_move_together and not who_vous, l_conj.new_foy, new_foy)
                - quifoy: if(to_move_together and who_vous, 0, quifoy)
                - quifoy: if(to_move_together and not who_vous, 1, quifoy)               
                # enfant
                - new_foy: if(l_mere.to_move_together and (new_foy==foy),
                            if(l_mere.foy==foy, l_mere.new_foy, new_foy),
                            new_foy)
                - new_foy: if(l_pere.to_move_together and (new_foy==foy),
                            if(l_pere.foy==foy, l_pere.new_foy, new_foy),
                            new_foy) 
                # autres, qui ne sont pas a new_foy == foy parce que leur parent est reste
                # penser aux petits enfants
                - new_foy: if( (quifoy > 1) and (new_foy==foy),
                                l_foy.l_vous.new_foy, 
                                new_foy)       

                                
                - foy:   new_foy
                #TODO: dissocier pacs et mariage
                - civilstate: if(to_move_together, MARRIED, civilstate)
               
                - assertEqual(max(l_foy.get(on_declar.count(quifoy==0))),1)
                - assertTrue(min(foy)>=0)
                
                # - csv(dump(id, age, sexe, l_conj.id, l_conj.age,
                           # l_conj.sexe, men, filter=justcoupled),
                      # fname='check_simul//person_{period}.csv')  
                
                # - l_men.pref: if(quimen==0,id, l_men.pref)
                # - l_foy.vous: if(quifoy==0,id, l_foy.vous)